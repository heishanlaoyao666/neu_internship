---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2022/7/5 16:58
---

local OutgameMsg = class("OutgameMsg", function()
    return display.newScene("OutgameMsg")
end)

local MsgController = require("app.msg.MsgController")
local Log = require("app.util.Log")
local TAG = "MainScene"
local data_={}

--[[--
    网络连接
    @param none
    @return none
]]

function OutgameMsg:connect()

    MsgController:connect()

end

--[[--
    登录
    @param none
    @return none
]]
function OutgameMsg:login(aloginname,apassword)

            local loginmsg = {
                type = 5,
                loginName = aloginname,
                passWord = apassword,
            }
    MsgController:sendMsg(loginmsg)
end
--[[--
    注册
    @param none
    @return none
]]
function OutgameMsg:register(aloginname,apassword)

    local loginmsg = {
        type = 6,
        loginName = aloginname,
        passWord = apassword,
    }
    MsgController:sendMsg(loginmsg)
end

--[[--
    向服务器发送数据，要标明数据类型
    @param none
    @return none
]]

function OutgameMsg:sendData(aloginname,datatype,data)

    local senddata={
        type=7,
        loginName=aloginname,
        dataType=datatype,
        data=data,
    }
    print(senddata)
    MsgController:sendMsg(senddata)
end

--[[--
    向服务器接收数据，要标明数据类型,
    注意：该函数只是将服务器发来的数据传输到控制器中，如果得到数据需要调用MsgController:returndata_
    MsgController:returndata_返回值为table，也可以调用OutgameMsg:getdataFromMsg  data_为数据
    @param none
    @return none
]]

function OutgameMsg:getData(aloginname,datatype)

    local getdata={
        type=8,
        loginName=aloginname,
        dataType=datatype,
    }
    MsgController:sendMsg(getdata)

end
function OutgameMsg:getdataFromMsg()
    data_=MsgController:returndata_()
end


--[[--
    天梯匹配，向服务器发送匹配指令
    @param none
    @return none
]]

function OutgameMsg:match(aloginname)
    local getdata={
        type=9,
        loginName=aloginname,
        matching=1,
    }
    MsgController:sendMsg(getdata)
end
--[[--
    取消天梯匹配，向服务器发送匹配指令
    @param none
    @return none
]]
function OutgameMsg:cancleMatch(aloginname)

    local getdata={
        type=9,
        loginName=aloginname,
        matching=0,
    }
    MsgController:sendMsg(getdata)
end

function OutgameMsg:onEnter()
--[[    MsgController:registerListener(self, handler(self, self.handleMsg))]]
end

function OutgameMsg:onExit()
--[[    MsgController:unregisterListener(self)]]
end

function OutgameMsg:handleMsg(msg)

    Log.i(TAG, "handleMsg() msg=", msg)
end

return OutgameMsg

